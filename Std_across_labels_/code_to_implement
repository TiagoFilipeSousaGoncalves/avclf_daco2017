# -*- coding: utf-8 -*-
"""
Created on Tue Dec 12 09:40:59 2017

@author: tiago
"""

import os
import matplotlib.pyplot as plt
import numpy as np
import retinal_image as ri
import apply_skeleton
import find_interestpoints 
import divideIntoSegments
#import detectOpticDisk
import apply_homomorphic_filtering
import cv2
from skimage.morphology import skeletonize


#import find_interestpointsv2 

#Paths
path_to_training_retinal_ims = 'data/training/images/'
path_to_training_retinal_masks = 'data/training/masks/'
path_to_training_retinal_vessels = 'data/training/vessels/'
path_to_training_arteries = 'data/training/arteries/'
path_to_training_veins = 'data/training/veins/'
retinal_im_list = os.listdir(path_to_training_retinal_ims)
nr_retinal_ims = len(retinal_im_list) # number of retinal images of the training set
nr_ims = len(retinal_im_list) # same as above

#Open images
#for kk in range(19):
image_object = ri.retinal_image(retinal_im_list[6], 'train')
img_rgb=image_object.image; 
image_vessels=image_object.vessels



#    
#    #Do you want to plot?
plotFlag=0
    
    # perform skeletonization
skeleton=apply_skeleton.apply_skeleton(image_vessels,plotFlag)
    
    #Find interest points
coordinates=find_interestpoints.find_interestpoints(skeleton,plotFlag)
    
    #Divide into segments
labels = divideIntoSegments.divideIntoSegments(skeleton, coordinates,plotFlag)
    
    #Homomorphic filtering to reduce 
#img_rgb=apply_homomorphic_filtering.apply_homomorphic_filtering(image_object,img_rgb,plotFlag)
    
    #Detect optic disk
#img_gray=cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)   
   

#y_disk, x_disk = detectOpticDisk.detectOpticDisk(image_object.image[:,:,1],plotFlag)
    
from skimage.measure import regionprops
    
regions=regionprops(labels)
import math
    
orientations_image=np.zeros((img_rgb.shape[0],img_rgb.shape[1]))
i=0
from skimage.draw import line_aa

from scipy import ndimage
distanceTransform=ndimage.distance_transform_edt(image_vessels)
diameter=distanceTransform * skeleton
meanDiameterInRegion=np.zeros(np.max(labels))

std_image=np.zeros((img_rgb.shape[0], img_rgb.shape[1]))
tempImg=np.zeros((img_rgb.shape[0],img_rgb.shape[1]))
for props in regions:
    i=i+1
    y0, x0 = props.centroid
    orientation = props.orientation
    orientations_image[labels==i]=orientation; 
    x1 = x0 + math.cos(orientation) * 0.5 * props.major_axis_length
    y1 = y0 - math.sin(orientation) * 0.5 * props.major_axis_length
    x3 = x0 + math.cos(math.pi/2 + orientation)*0.5*props.major_axis_length;
    y3 = y0 - math.sin(math.pi/2 + orientation) * 0.5 * props.major_axis_length; 
    start_x=x0 - math.cos(math.pi/2 + orientation)*0.25*props.major_axis_length;
    start_y=y0 + math.sin(math.pi/2 + orientation) * 0.25 * props.major_axis_length; 
    end_x=x0 + math.cos(math.pi/2 + orientation)*0.25*props.major_axis_length;
    end_y=y0 - math.sin(math.pi/2 + orientation) * 0.25 * props.major_axis_length;
    rr, cc, val = line_aa(int(start_x), int(start_y), int(end_x), int(end_y))
    tempImg[rr, cc]=1
    thin_perpendicularlines=skeletonize(tempImg)
    region = thin_perpendicularlines*image_vessels #0s em todos os sitios menos na interse√ßao
    if math.isnan(np.std(img_rgb[region==True])):
        std_image[labels==i] = 0
    else:
        std_image[labels==i] = np.std(img_rgb[region==True])

print(std_image[std_image!=0])
